{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyMPUkFA9J8xN4GpDAPsTRJ4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/devil973/Crickcast/blob/main/assignment_5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YD15Lynr-IW5"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Parameters\n",
        "S0 = 100       # Initial stock price\n",
        "T = 1.0        # Time to maturity (1 year)\n",
        "r = 0.05       # Risk-free interest rate i.e bank rates or govt bond rates\n",
        "sigma = 0.2    # Volatility\n",
        "M = 10000      # Number of Monte Carlo simulations\n",
        "N = 252        # Number of time steps (trading days)\n",
        "dt = T / N     # Time increment\n",
        "K = 100        # Strike price (price at the time of maturity)\n",
        "\n",
        "# asset paths using Euler-Maruyama\n",
        "def simulate_gbm_paths(S0, r, sigma, T, M, N):\n",
        "    dt = T / N\n",
        "    S = np.zeros((M, N+1))\n",
        "    S[:, 0] = S0\n",
        "    for t in range(1, N+1):\n",
        "        dW = np.random.normal(0, np.sqrt(dt), M) #expected payoff at the time maturity\n",
        "        S[:, t] = S[:, t-1] + r * S[:, t-1] * dt + sigma * S[:, t-1] * dW\n",
        "    return S\n",
        "\n",
        "# European Call Option\n",
        "def european_call(S_paths, K):\n",
        "    ST = S_paths[:, -1]\n",
        "    payoff = np.maximum(ST - K, 0) #expected payoff at the time maturity\n",
        "    return np.exp(-r * T) * np.mean(payoff)# discounted to the present value at risk free rate\n",
        "\n",
        "# Arithmetic Asian Call Option\n",
        "def arithmetic_asian_call(S_paths, K):\n",
        "    average = np.mean(S_paths[:, 1:], axis=1)\n",
        "    payoff = np.maximum(average - K, 0) #expected payoff at the time maturity\n",
        "    return np.exp(-r * T) * np.mean(payoff)# discounted to the present value at risk free rate\n",
        "\n",
        "# Geometric Asian Call Option\n",
        "def geometric_asian_call(S_paths, K):\n",
        "    log_avg = np.mean(np.log(S_paths[:, 1:]), axis=1)\n",
        "    geo_avg = np.exp(log_avg)\n",
        "    payoff = np.maximum(geo_avg - K, 0) #expected payoff at the time maturity\n",
        "    return np.exp(-r * T) * np.mean(payoff)# discounted to the present value at risk free rate\n",
        "\n",
        "# Lookback Call Option with Floating Strike\n",
        "def lookback_call_floating(S_paths):\n",
        "    S_min = np.min(S_paths, axis=1)\n",
        "    payoff = S_paths[:, -1] - S_min #expected payoff at the time maturity\n",
        "    return np.exp(-r * T) * np.mean(payoff)# discounted to the present value at risk free rate\n",
        "\n",
        "# Generate paths and calculate prices\n",
        "paths = simulate_gbm_paths(S0, r, sigma, T, M, N)\n",
        "print(\"European Call Option Price:\", european_call(paths, K))\n",
        "print(\"Arithmetic Asian Call Option Price:\", arithmetic_asian_call(paths, K))\n",
        "print(\"Geometric Asian Call Option Price:\", geometric_asian_call(paths, K))\n",
        "print(\"Lookback Floating Call Option Price:\", lookback_call_floating(paths))\n",
        "\n",
        "# Plot sample paths\n",
        "for i in range(10):\n",
        "    plt.plot(np.linspace(0, T, N+1), paths[i])\n",
        "plt.title(\"Sample GBM Paths via Eulerâ€“Maruyama\")\n",
        "plt.xlabel(\"Time\")# x= nth day/252\n",
        "plt.ylabel(\"Asset Price\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    }
  ]
}